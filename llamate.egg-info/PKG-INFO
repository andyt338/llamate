Metadata-Version: 2.4
Name: llamate
Version: 0.1.0
Summary: A memory-augmented framework for LLMs
Author: Andy Thompson
Author-email: Andy Thompson <andyt338@gmail.com>
License: MIT
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: openai>=1.0.0
Requires-Dist: faiss-cpu
Requires-Dist: numpy
Requires-Dist: python-dotenv
Provides-Extra: postgres
Requires-Dist: psycopg2-binary; extra == "postgres"
Dynamic: author
Dynamic: license-file
Dynamic: requires-python

# 🦙 llamate

**llamate** is a memory-augmented agent framework for LLMs.
It adds **long-term memory** to your AI agents using OpenAI embeddings and vector search (FAISS or Postgres).

Easily plug it into your chatbot, assistant, or any language model workflow.

---

## 🚀 Installation

Install locally in editable mode:

```bash
pip install -e .[postgres]
```

Or install the core FAISS-only version:

```bash
pip install -e .
```

---

## 🧠 Quick Start (Python)

```python
from llamate import MemoryAgent

agent = MemoryAgent(user_id="andy")

# Add memory
agent.chat("Our Q4 plan is to launch Black Friday campaigns.")

# Recall memory
response = agent.chat("What did I say about Q4?")
print(response)
```

---

## 💻 CLI Usage

Launch an interactive terminal session:

```bash
python -m llamate.cli --user andy
```

Example:

```bash
You: Our Q4 plan is to launch Black Friday campaigns.
LLAMate: Got it.

You: What did I say about Q4?
LLAMate: You said our Q4 plan is to launch Black Friday campaigns.
```

---

## ⚙️ Configuration

Create a `.env` file (or use the provided `.env.example`) in your project root:

```env
LLAMATE_OPENAI_API_KEY=sk-...
LLAMATE_VECTOR_BACKEND=faiss  # or postgres
LLAMATE_DATABASE_URL=postgresql://user:pass@localhost:5432/dbname  # if using Postgres
```

---

## 🧪 Optional: Init Script

To scaffold a working `.env` file and create the Postgres table automatically:

```bash
llamate --init
```

---

## 🦪 Running Tests

```bash
pytest tests/
```

---

## 📁 Project Structure

```
llamate/
├── agent.py                 # MemoryAgent core
├── embedder.py              # Embedding backend (OpenAI)
├── vectorstore.py           # FAISS vector store
├── vectorstore_postgres.py  # Postgres vector store (pgvector)
├── backends.py              # Backend selector
├── config.py                # Env var utilities
├── cli.py                   # CLI interface
├── store.py                 # Shared memory interface
├── utils.py                 # Helpers
```

---

## ✨ Features

* 🔐 OpenAI-compatible embedding backend (pluggable)
* 🔎 Vector search using FAISS or Postgres
* 🧠 Multi-turn, persistent memory per user
* 💡 Easily swappable vector store backends
* 🦪 Fully tested with `pytest`
* 🧠 Designed for integration into existing apps or backends

---

## 📄 License

[MIT](./LICENSE) — Build, modify, and distribute freely.

---

## 💡 Name origin

> Like a *llama* with *memory* 🧠
> Or a mate that remembers everything you say.
